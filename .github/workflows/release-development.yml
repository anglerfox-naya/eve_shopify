name: Release development
on:
  workflow_dispatch:
    inputs:
      store:
        required: true
        default: dev039
        type: choice
        options:
          - dev039
          - uk
          - ie
          - fr
          - ie-staging
  issue_comment:
    types: [created]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  define-matrix:
    name: Define matrix
    runs-on: ubuntu-latest
    outputs:
      stores: ${{ steps.prepare.outputs.stores }}
      tag: ${{ steps.prepare.outputs.tag }}
      branch: ${{ steps.prepare.outputs.branch }}
    steps:
      # This defaults to a shallow clone anyway so there is no real harm in
      # cloning regardless of trigger. Otherwise it might be prudent to clone
      # only in the instance that the workflow is being triggered by a comment
      # i.e. needs a repo in order to checkout the PR branch
      - uses: actions/checkout@v2
      # - run: objdump -D -i "${{ github.event.inputs }}"
      # If this event was triggered manually then set the trigger values as ENV
      # vars
      - name: Process dispatch
        if: github.event_name == 'issue_comment' #'workflow_dispatch'
        env:
          PASSWORD_REF: 'DEV039_PASSWORD'
          STORE: "${{ github.event.inputs.store }}"
        run: |
          echo "STORES=${STORE}" >> $GITHUB_ENV
          echo "TAG=${GITHUB_REF_NAME}" >> $GITHUB_ENV
          echo "BRANCH=${GITHUB_REF}" >> $GITHUB_ENV

      # If this event was triggered via a PR comment then we need to extract the
      # instructions and set the ENV vars in the same way as if it were a manual
      # trigger
      - name: Process comment
        if: github.event.issue.pull_request && contains(github.event.comment.body, 'deploy:')
        env:
          BODY: "${{ github.event.comment.body }}"
          ISSUE_NUMBER: "${{ github.event.issue.number }}"
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Search for instances of "deploy:<store>:<ticket>" in the PR comment body
          # and pull out the store names.
          DEPLOY=$(awk -F: '{print $1}' <<< ${BODY})
          STORE=$(awk -F: '{print $2}' <<< ${BODY})
          TICKET=$(awk -F: '{print $3}' <<< ${BODY})
          echo ${DEPLOY} == ${STORE} == ${TICKET}

          PASSWORD_REF=${STORE}_PASSWORD
          echo ${PASSWORD_REF}
          echo ${{ secrets[PASSWORD_REF] }} | sed 's/./& /g'
          
          # STORE="$(cut -d':' -f2 <<<"${BODY}")"
          echo "STORES=$(echo $STORE | cut -c 1-6)" >> $GITHUB_ENV
          echo "TICKET=$(echo $TICKET | cut -c 1-6)" >> $GITHUB_ENV
         
          # echo "STORES=${STORE}" >> $GITHUB_ENV
          # echo "TAG=${tag}" >> $GITHUB_ENV
          # echo "BRANCH=${branch}" >> $GITHUB_ENV

      - name: Prepare build inputs
        id: prepare
        run: |
          if [[ ! -z "${STORES// }" ]] && [[ ! -z "${TAGS// }" ]]; then
            # Loop over the store names and generate the JSON required for the
            # matrix input of the build step

            stores=(${STORES})
            query='.'

            for i in ${!stores[@]}; do
              props+=(--arg "store_${i}" "${stores[i]}")
              query+=" | . += [\$store_${i}]"
            done

            json=$(jq -c "${props[@]}" "${query}" <<< "[]")

            echo "::set-output name=stores::${json}"
            echo "::set-output name=tag::${TAG}"
            echo "::set-output name=branch::${BRANCH}"
          else
            echo "Missing stores or tag"
          fi

  # call-lint:
  #   uses: ./.github/workflows/lint.yml
  #   needs: define-matrix

  call-build:
    uses: ./.github/workflows/build.yml
    needs: [define-matrix]
    if: needs.define-matrix.outputs.tag
    with: 
      release_stage: development
      tag: "${{ needs.define-matrix.outputs.tag }}"
      prefix: "${TICKET}"
      branch: "${{ needs.define-matrix.outputs.branch }}"

  call-localise:
    uses: ./.github/workflows/localise.yml
    needs: [define-matrix, call-build]
    if: needs.define-matrix.outputs.stores
    with:
      stores: '${{ needs.define-matrix.outputs.stores }}'
    secrets:
      uk_password: ${{ secrets.UK_PASSWORD }}
      ie_password: ${{ secrets.IE_PASSWORD }}
      fr_password: ${{ secrets.FR_PASSWORD }}
      ie_staging_password: ${{ secrets.IE_STAGING_PASSWORD }}

  call-deploy:
    uses: ./.github/workflows/deploy.yml
    needs: call-localise
    secrets:
      dev039_password: ${{ secrets.DEV039_PASSWORD }}
      uk_password: ${{ secrets.UK_PASSWORD }}
      ie_password: ${{ secrets.IE_PASSWORD }}
      fr_password: ${{ secrets.FR_PASSWORD }}
      ie_staging_password: ${{ secrets.IE_STAGING_PASSWORD }}
      ngrok_token: ${{ secrets.NGROK_AUTH_TOKEN }}

  clean-up:
    runs-on: ubuntu-latest
    needs: call-deploy
    steps:
      - name: Delete base theme
        uses: geekyeggo/delete-artifact@v1
        with:
          name: base-theme
          failOnError: false

  acknowledge:
    name: Confirm deployment
    needs: call-deploy
    runs-on: ubuntu-latest
    if: github.event.issue.pull_request
    steps:
      - name: Add reaction
        uses: actions/github-script@v4
        with:
          script: |
            const {owner, repo} = context.issue
            github.reactions.createForIssueComment({
              owner,
              repo,
              comment_id: context.payload.comment.id,
              content: "rocket",
            });
