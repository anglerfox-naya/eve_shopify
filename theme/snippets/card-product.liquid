{% comment %}
    Renders a product card

    Accepts:
    - card_product: {Object} Product Liquid object (optional)
    - media_aspect_ratio: {String} Size of the product image card. Values are "square" and "portrait". Default is "square" (optional)
    - show_secondary_image: {Boolean} Show the secondary image on hover. Default: false (optional)
    - show_vendor: {Boolean} Show the product vendor. Default: false
    - show_rating: {Boolean} Show the product rating. Default: false
    - extend_height: {Boolean} Card height extends to available container space. Default: true (optional)
    - lazy_load: {Boolean} Image should be lazy loaded. Default: true (optional)

    Usage:
    {% render 'card-product', show_vendor: section.settings.show_vendor %}
{% endcomment %}

{{ 'component-rating.css' | asset_url | stylesheet_tag }}
{{ 'component-colour-swatches.css' | asset_url | stylesheet_tag }}

{%- if card_product and card_product != empty -%}
  {%- liquid
    assign ratio = 1
    if card_product.featured_media and media_aspect_ratio == 'portrait'
      assign ratio = 0.8
    elsif card_product.featured_media and media_aspect_ratio == 'adapt'
      assign ratio = card_product.featured_media.aspect_ratio
    endif
    if ratio == 0 or ratio == nil
      assign ratio = 1
    endif

    comment
    # Custom badge logic
    endcomment
    assign custom_badge_text = false
    if settings.custom_badges
      assign tag_base = settings.custom_badges_syntax | strip
      for tag in card_product.tags
        if tag contains tag_base
          assign custom_badge_text = tag | remove: tag_base
          break
        endif
      endfor
    endif  

    if settings.card_swatches
      comment
        # Colour swatch logic
        Check which of the colour strings appears within product.options_by_name.
        Once detected, a list of all colour variant values are assigned to the `colour_options_array` variabe, 
        and the relevant colour string (i.e. colour, color, couleur) is assigned to the `colour_string` variable.
      endcomment
      assign colour_strings_lower = settings.colour_option_strings | downcase
      assign colour_strings = settings.colour_option_strings | append: '|' | append: colour_strings_lower | split: '|'
      for string in colour_strings
        assign string_strip = string | strip
        if card_product.options_by_name[string_strip]
          assign colour_options_array = card_product.options_by_name[string_strip].values
          assign colour_string = string_strip
          break 
        endif
      endfor

      comment
        # Colour swatch logic
        Loop through the product's available options, checking to see if the values appear in the `colour_options_array`
        variable. If they do, we capture the option index (i.e. option1, option2 or option3). This allows us to easily
        access colour values later.
      endcomment
      for option in card_product.selected_or_first_available_variant.options
        if colour_options_array contains option
          assign colour_option = forloop.index | prepend: 'option'
          break
        endif
      endfor

      comment
        # Colour swatch logic
        Check the available product options.
        If the option value is foundin the array of available colours, we show swatches.
      endcomment
      assign swatch_markup = ''
      for option in card_product.options_with_values
        assign option_name = option.name | downcase
        if colour_strings contains option_name and option.values.size > 1
          capture collection_colour_swatches
            render 'collection-colour-swatches', ctx: 'swatches', product: card_product, option: option, colour_option: colour_option
          endcapture
          capture collection_colour_images
            render 'collection-colour-swatches', ctx: 'images', product: card_product, option: option, colour_option: colour_option
          endcapture
          break
        endif
      endfor
    endif
  -%}

  <div class="card-wrapper">
    <div class="card card--standard card--media card--product{% if settings.card_swatches %} card-with-swatches{% endif %}"
      style="--ratio-percent: {{ 1 | divided_by: ratio | times: 100 }}%;"
    >
      <div class="card__inner color-background-2 gradient ratio" style="--ratio-percent: {{ 1 | divided_by: ratio | times: 100 }}%;">
        {%- if card_product.featured_media -%}
          <div class="card__media media media--transparent media--hover-effect">
            {% comment %}theme-check-disable ImgLazyLoading{% endcomment %}
            <img
              srcset="{%- if card_product.featured_media.width >= 165 -%}{{ card_product.featured_media | image_url: width: 165 }} 165w,{%- endif -%}
                {%- if card_product.featured_media.width >= 360 -%}{{ card_product.featured_media | image_url: width: 360 }} 360w,{%- endif -%}
                {%- if card_product.featured_media.width >= 533 -%}{{ card_product.featured_media | image_url: width: 533 }} 533w,{%- endif -%}
                {%- if card_product.featured_media.width >= 720 -%}{{ card_product.featured_media | image_url: width: 720 }} 720w,{%- endif -%}
                {%- if card_product.featured_media.width >= 940 -%}{{ card_product.featured_media | image_url: width: 940 }} 940w,{%- endif -%}
                {%- if card_product.featured_media.width >= 1066 -%}{{ card_product.featured_media | image_url: width: 1066 }} 1066w,{%- endif -%}
                {{ card_product.featured_media | image_url }} {{ card_product.featured_media.width }}w"
              src="{{ card_product.featured_media | image_url: width: 533 }}"
              sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 130 | divided_by: 4 }}px, (min-width: 990px) calc((100vw - 130px) / 4), (min-width: 750px) calc((100vw - 120px) / 3), calc((100vw - 35px) / 2)"
              alt="{{ card_product.featured_media.alt | escape }}"
              class="motion-reduce"
              {% unless lazy_load == false %}loading="lazy"{% endunless %}
              width="{{ card_product.featured_media.width }}"
              height="{{ card_product.featured_media.height }}"
            >
            {% comment %}theme-check-enable ImgLazyLoading{% endcomment %}

            {%- if card_product.media[1] != nil and show_secondary_image -%}
              <img
                srcset="{%- if card_product.media[1].width >= 165 -%}{{ card_product.media[1] | image_url: width: 165 }} 165w,{%- endif -%}
                  {%- if card_product.media[1].width >= 360 -%}{{ card_product.media[1] | image_url: width: 360 }} 360w,{%- endif -%}
                  {%- if card_product.media[1].width >= 533 -%}{{ card_product.media[1] | image_url: width: 533 }} 533w,{%- endif -%}
                  {%- if card_product.media[1].width >= 720 -%}{{ card_product.media[1] | image_url: width: 720 }} 720w,{%- endif -%}
                  {%- if card_product.media[1].width >= 940 -%}{{ card_product.media[1] | image_url: width: 940 }} 940w,{%- endif -%}
                  {%- if card_product.media[1].width >= 1066 -%}{{ card_product.media[1] | image_url: width: 1066 }} 1066w,{%- endif -%}
                  {{ card_product.media[1] | image_url }} {{ card_product.media[1].width }}w"
                src="{{ card_product.media[1] | image_url: width: 533 }}"
                sizes="(min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 130 | divided_by: 4 }}px, (min-width: 990px) calc((100vw - 130px) / 4), (min-width: 750px) calc((100vw - 120px) / 3), calc((100vw - 35px) / 2)"
                alt="{{ card_product.media[1].alt | escape }}"
                class="motion-reduce"
                loading="lazy"
                width="{{ card_product.media[1].width }}"
                height="{{ card_product.media[1].height }}"
              >
            {%- endif -%}
            {% if settings.card_swatches %}
              {{ collection_colour_images }}
            {% endif %}
          </div>
        {%- endif -%}
        {%- if card_product.available == false -%}
          <span class="badge badge--oos">{{ 'products.product.sold_out' | t }}</span>
        {%- elsif card_product.compare_at_price > card_product.price and card_product.available and settings.sale_badge -%}
          {% render 'get-sale-text', product: card_product %}
        {%- endif -%}
      </div>
      <div class="card__content">
        <div class="card__information">
          <h3 class="card__heading{% if card_product.featured_media or settings.card_style == 'standard' %} h4{% endif %}">
            <a href="{{ card_product.url }}" class="full-unstyled-link">
              <span>{{ card_product.title | escape }}</span>
              {%- if custom_badge_text -%}
                <span class="badge badge--custom color-{{ settings.custom_badge_color_scheme }}">{{ custom_badge_text }}</span>
              {% endif %}
            </a>
          </h3>
          <div class="card-information">
            {%- if show_vendor -%}
              <span class="visually-hidden">{{ 'accessibility.vendor' | t }}</span>
              <div class="caption-with-letter-spacing light">{{ card_product.vendor }}</div>
            {%- endif -%}

            <span class="caption-large light">{{ block.settings.description | escape }}</span>

            {%- if show_rating and card_product.metafields.reviews.rating.value != blank -%}
              {% liquid
                assign rating_decimal = 0
                assign decimal = card_product.metafields.reviews.rating.value.rating | modulo: 1
                if decimal >= 0.3 and decimal <= 0.7
                  assign rating_decimal = 0.5
                elsif decimal > 0.7
                  assign rating_decimal = 1
                endif
              %}
              <div class="rating" role="img" aria-label="{{ 'accessibility.star_reviews_info' | t: rating_value: card_product.metafields.reviews.rating.value, rating_max: card_product.metafields.reviews.rating.value.scale_max }}">
                <span aria-hidden="true" class="rating-star color-icon-{{ settings.accent_icons }}" style="--rating: {{ card_product.metafields.reviews.rating.value.rating | floor }}; --rating-max: {{ card_product.metafields.reviews.rating.value.scale_max }}; --rating-decimal: {{ rating_decimal }};"></span>
              </div>
              <p class="rating-text caption">
                <span aria-hidden="true">{{ card_product.metafields.reviews.rating.value }} / {{ card_product.metafields.reviews.rating.value.scale_max }}</span>
              </p>
              <p class="rating-count caption">
                <span aria-hidden="true">({{ card_product.metafields.reviews.rating_count }})</span>
                <span class="visually-hidden">{{ card_product.metafields.reviews.rating_count }} {{ "accessibility.total_reviews" | t }}</span>
              </p>
            {%- endif -%}
            {% render 'price', product: card_product, price_class: '' %}
          </div>
        </div>
        {% if settings.card_swatches %}
          {{ collection_colour_swatches }}
        {% endif %}
      </div>
    </div>
  </div>
{%- else -%}
  {%- comment -%} Empty card markup {%- endcomment -%}
  <div class="card-wrapper underline-links-hover">
    <div class="card
      card--{{ settings.card_style }}
      card--text
      {% if extend_height %} card--extend-height{% endif %}
      {% if settings.card_style == 'card' %} color-{{ settings.card_color_scheme }} gradient{% endif %}
      {% if card_product.featured_media == nil and settings.card_style == 'card' %} ratio{% endif %}"
      style="--ratio-percent: 100%;"
    >
      <div class="card__inner {% if settings.card_style == 'standard' %}color-{{ settings.card_color_scheme }} gradient{% endif %}{% if settings.card_style == 'standard' %} ratio{% endif %}" style="--ratio-percent: 100%;">
        <div class="card__content">
          <div class="card__information">
            <h3 class="card__heading">
              <a role="link" aria-disabled="true" class="full-unstyled-link">
                {{ 'onboarding.product_title' | t }}
              </a>
            </h3>
          </div>
        </div>
        {%- if card_product.available == false -%}
          <span class="badge badge--sold-out">{{ 'products.product.sold_out' | t }}</span>
        {%- elsif card_product.compare_at_price > card_product.price and card_product.available and settings.sale_badge -%}
          {% render 'get-sale-text', product: card_product %}
        {%- endif -%}
      </div>

      <div class="card__content">
        <div class="card__information">
          <h3 class="card__heading{% if settings.card_style == 'standard' %} h5{% endif %}">
            <a role="link" aria-disabled="true" class="full-unstyled-link">
              {{ 'onboarding.product_title' | t }}
            </a>
          </h3>
          <div class="card-information">
            {%- if show_vendor -%}
              <span class="visually-hidden">{{ 'accessibility.vendor' | t }}</span>
              <div class="caption-with-letter-spacing light">{{ 'products.product.vendor' | t }}</div>
            {%- endif -%}
            {% render 'price' %}
          </div>
        </div>
      </div>
    </div>
  </div>
  {%- comment -%} /Empty card markup {%- endcomment -%}
{%- endif -%}
